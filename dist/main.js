(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(15),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,".modal {\n  display: none;\n  position: fixed;\n  z-index: 99;\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  background-color: rgb(0, 0, 0); /* Fallback color */\n  background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\n  overflow: hidden;\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,eAAe;EACf,WAAW;EACX,OAAO;EACP,MAAM;EACN,WAAW,EAAE,eAAe;EAC5B,YAAY,EAAE,gBAAgB;EAC9B,8BAA8B,EAAE,mBAAmB;EACnD,oCAAoC,EAAE,qBAAqB;EAC3D,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,UAAU;AACZ",sourcesContent:[".modal {\n  display: none;\n  position: fixed;\n  z-index: 99;\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  background-color: rgb(0, 0, 0); /* Fallback color */\n  background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\n  overflow: hidden;\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n}\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(l," */"),d=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(d).concat([s]).join("\n")}return[a].join("\n")}},379:(e,t,n)=>{var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function i(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var c=e[o],l=t.base?c[0]+t.base:c[0],s=n[l]||0,d="".concat(l," ").concat(s);n[l]=s+1;var u=i(d),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(a[u].references++,a[u].updater(f)):a.push({identifier:d,updater:y(f,t),references:1}),r.push(d)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var s,d=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function u(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function f(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,v=0;function y(e,t){var n,r,o;if(t.singleton){var a=v++;n=p||(p=l(t)),r=u.bind(null,n,a,!1),o=u.bind(null,n,a,!0)}else n=l(t),r=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=i(n[r]);a[o].references--}for(var l=c(e,t),s=0;s<n.length;s++){var d=i(n[s]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}n=l}}}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e="todo.lists",t="todo.selectedId",r=JSON.parse(localStorage.getItem(e))||[],o={selectedId:localStorage.getItem(t)},a=function(){localStorage.setItem(e,JSON.stringify(r)),localStorage.setItem(t,o.selectedId)},i=function(e){for(;e.firstChild;)e.removeChild(e.firstChild)},c=document.querySelector("#title"),l=document.querySelector("#description"),s=document.querySelector("#date"),d=document.querySelector("#priority"),u=document.querySelector("#todoindex"),f=document.querySelector(".submit"),p=document.querySelector("#myModal"),v=document.querySelector("[data-new-task-form]"),y=document.querySelector("[data-project-input]"),m=document.querySelector("[data-lists]"),h=document.querySelector("[data-project-form]"),A=document.querySelector("[data-todo-template]"),g=document.querySelector(".cards"),b=document.querySelector("#myBtn"),S=document.querySelector(".close"),E=document.querySelector(".modal-title"),C=!1,w=function(e){e.tasks.forEach((function(t){var n=document.importNode(A.content,!0),i=n.querySelector(".card");n.querySelector(".card-title").innerText=t.title,n.querySelector(".card-description").innerText=t.description;var y=n.querySelector(".card-priority");y.innerText=t.priority,y.classList.add("btn"),n.querySelector(".card-footer").innerText="Due on ".concat(t.ddate);var m=n.querySelector(".edit-btn"),h=e.tasks.indexOf(t);m.addEventListener("click",(function(){return function(e,t){!function(){var e=document.querySelector(".modal-title");C?(p.style.pointerEvents="none",p.style.transform="scale(0)",C=!1,v.reset()):(e.textContent="Update Todo",v.value="Update",f.innerHTML="update",p.style.pointerEvents="auto",p.style.transform="scale(1)",p.style.display="block",C=!0,v.reset())}(),c.value=e.title,l.value=e.description,d.value=e.priority,s.value=e.ddate,u.value=t,f.classList.add("edit")}(t,h)})),n.querySelector(".delete-btn").addEventListener("click",(function(){!function(e,t){var n=e.value;r.find((function(e){return e.id===o.selectedId})).tasks.splice(n,1),f.classList.contains("edit")&&f.classList.remove("edit"),a(),g.removeChild(t)}(u,i)})),g.appendChild(n),document.querySelectorAll(".card-priority").forEach((function(e){return"high"===e.textContent?e.classList.add("btn-success"):"medium"===e.textContent?e.classList.add("btn-warning"):e.classList.add("btn-danger")}))}))};const L=function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.title=t,this.description=n,this.ddate=r,this.priority=o,this.id=Date.now().toString()},x=function(e){return{id:Date.now().toString(),name:e,tasks:[]}};var k=n(379),q=n.n(k),B=n(426);q()(B.Z,{insert:"head",singleton:!1}),B.Z.locals;var I=function(){i(m),r.forEach((function(e){var t=document.createElement("li");t.dataset.listId=e.id,t.classList.add("list-group-item"),t.setAttribute("role","button"),t.innerText=e.name,e.id===o.selectedId&&t.classList.add("active"),m.appendChild(t)}));var e=r.find((function(e){return e.id===o.selectedId}));null==e?g.style.display="none":(g.style.style="",i(g),w(e))};I();var T=function(){I(),a()};!function(){if(0===r.length){var e=x("Default");o.selectedId=e.id,r.push(e),T()}}(),h.addEventListener("submit",(function(e){e.preventDefault();var t=y.value;if(null!=t&&""!==t){var n=x(t);y.value=null,r.push(n),T()}})),m.addEventListener("click",(function(e){e.preventDefault(),"li"===e.target.tagName.toLowerCase()&&(o.selectedId=e.target.dataset.listId,T())})),f.addEventListener("click",(function(e){if(e.preventDefault(),f.classList.contains("edit")){var t=u.value,n=r.find((function(e){return e.id===o.selectedId})),a=n.tasks[t];a.title=c.value,a.description=l.value,a.priority=d.value,a.ddate=s.value,n.tasks[t]=a,f.classList.remove("edit"),v.reset(),p.style.display="none"}else if(g=c.value,b=l.value,S=s.value,E=document.querySelector(".message"),""===g?(E.innerHTML="Please fill the Title field",E.classList.add("alert","alert-danger"),0):""===b?(E.innerHTML="Please fill the description field",E.classList.add("alert","alert-danger"),0):""!==S||(E.innerHTML="Please fill the due date field",E.classList.add("alert","alert-danger"),0)){var i=c.value,y=l.value,m=s.value,h=d.value,A=new L(i,y,m,h);r.find((function(e){return e.id===o.selectedId})).tasks.push(A),p.style.display="none",v.reset()}var g,b,S,E;T()})),b.addEventListener("click",(function(){p.style.display="block",E.textContent="New Todo",f.innerHTML="Add",v.reset()})),S.addEventListener("click",(function(){p.style.display="none",v.reset()})),window.onclick=function(e){e.target===p&&(p.style.display="none",v.reset())}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,